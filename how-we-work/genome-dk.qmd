---
title: "Working on GenomeDK"
---

## GenomeDK

[GenomeDK](https://genome.au.dk) is the name of Aarhus University's
super computer cluster. It is a high-performance computing (HPC) system.
It is ISO 27001 certified and approved to store sensitive data in
compliance with GDPR and the Danish Data Protection Act.

Within a Seedcase context we are going to use it as an example of how
Sprout can be used to import, organise and store data on a remote
cluster. It will also be used by the two projects that we are currently
working with, [DP-Next](https://dp-next.github.io) and
[ON-LiMiT](https://on-limit.github.io).

## Access

People associated with a university, the public sector (government
agencies, regions, and municipalities), or small and medium-sized
enterprises (SMEs) can ask for an account on GenomeDK, which is done via
the [request
account](https://console.genome.au.dk/user-requests/create/) portal. For
now, we will need to select the "Open" zone. You need to state your
preferred username and password even though the form seems to say to
only do it if you want to re-activate an old account.

## Setting up

Once you get approved for access you can run through the
[documentation](https://genome.au.dk/docs/), which is extensive and
quite detailed. Because GenomeDK is a Linux-based server, you setup,
access, and do many actions through a shell terminal. You will have to
set up two-factor authentication using an authenticator app (they don't
stipulate any in particular).

## Connecting via SSH

We will primarily be working with an SSH connection, with the guidance
on how to set up a public key to connect to the server is fairly easy to
follow.

You can then also access the files
[locally](https://genome.au.dk/docs/working-with-data/#mounting) to be
able to use text editors as normal.

## Setting up Conda

In order to work with the scripts from GitHub, you need to set up a
Conda environment. The initial setup is described in the GenomeDK
[documentation](https://genome.au.dk/docs/getting-started/). Once done,
you can set up a new Conda environment with the latest version of Python
using the following command:

``` bash
conda create --name [NAME OF ENV] python=3.12
conda activate [NAME OF ENV]
conda install -c conda-forge polars
conda install -c conda-forge pyjanitor
```

This will create a new Conda environment with the name you specify and
install the latest version of Python 3.12. You can then activate the
environment using the `conda activate` command. The two packages
`polars` and `pyjanitor` are installed from the conda-forge channel.

Another option is to use the `environment.yml` file that is in the
relevant GitHub repository. This file contains a list of all the
packages and their versions that are required to run the scripts. You
can create a new Conda environment using this file by running the
following command:

``` bash
conda env create -f environment.yml
```

This will create a new Conda environment with the name specified in the
`environment.yml` file and install all the required packages. You can
then activate the environment using the `conda activate` command.
